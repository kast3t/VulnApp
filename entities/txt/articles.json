[
  {
    "author_id": 2,
    "category": "Анеки",
    "image": "/img/anek_1.jpg",
    "title": "Лучший анек на все времена",
    "text": "Идет мужик с работы. На пути встречается старуха. Старуха протягивает ему свернутую в несколько раз бумагу и настоятельно так произносит: «Сам не читай - дай другим прочитать!». Мужик приходит домой, рассказывает жене, что встретил старуху которая дала ему записку, но настоятельно просила: «Сам не читай - дай другим прочитать!» Жена взяла записку, развернула ее и сказала: «Да за такие слова я больше жить с тобой не буду!» И выгнала мужа из дома.\nМужик пошел к лучшему другу проситься на ночлег. Приходит и говорит, что жена выгнала из дома. Тот удивляется: за что? Мужик рассказывает, как встретил старуху, которая дала ему какую-то записку и сказала: «Сам не читай - дай другим прочитать!» Жена прочла и выгнала его. Ну тут друг попросил посмотреть записку, чтобы разобраться. Но как только прочел ее, так злобно произнес: «Да после таких слов я тебе больше никогда не буду другом!» И выгнал мужика.\nИдет мужчик по улице. Встречается ему милиционер, интересуется, почему тот в полном одиночестве идет поздно по улице. А мужик рассказывает, что встретил старуху, которая дала ему какую-то записку и сказала: «Сам не читай - дай другим прочитать!». Пришел показал жене, а та из дома выгнала. Пришел к лучшему другу, тот тоже прочел записку и тоже выставил его за порог. Милиционер заинтересовался и попросил дать ему эту записку. Прочел и возмутился: «Да за такие слова тебя судить надо!»\nВ день суда судья просит мужика объяснить, что произошло. Мужик вспоминает, как встретил бабку, которая дала ему записку и сказала: «Сам не читай - дай другим прочитать!» Дал почитать ее жене, а та из дома выгнала. Друг прочел- отказался от него! Потом встретился милиционер, которому тоже стало интересно, что же написано в этой записке. Прочел, после чего мужик оказался здесь, в суде. Судья так заинтересовался тем, что могло быть в записке, что попросил показать ему ее. Прочтя содержимое он произнес: «Да за такие слова тебя расстрелять мало!». Мужика расстреляли.\nПопал мужик на Тот свет. А там апостол Петр встречает его и спрашивает, что, мол произошло? Ну мужик и давай рассказывать, как встретил старуху, которая дала ему записку и строго наказала: «Сам не читай - дай другим прочитать!» Дал жене почитать, а та из дома выгнала. Дал другу почитать, а тот от него отрекся. Милиционер прочел и под суд отдал. А судья после прочтенного приговорил к расстрелу. Апостол Петр заинтересовался и попросил показать ту самую записку. Развернул ее и…: «Да за такие слова тебе в раю не место!»\nПопал мужик в ад. Встречает его чёрт и спрашивает, что произошло и как он к нему попал. Мужик и начал заново свою историю о том, как встретил старуху, которая дала ему записку и просила самому не читать, а дать другим прочитать. Жена из дома выгнала, лучший друг отрекся, милиционер под суд отдал, судья приговорил к казни, из рая тоже выгнали. Ну чёрту стало интересно и он попросил показать ему записку. Прочтя, черт заявил: «Да за такие слова тебе и в аду не место!».\nПопал мужик в Лету. Очутился в лодке с каким-то старцем. Старец спросил, что же такого произошло, что мужик оказался в Лете? Мужик и рассказал, как встретил старуху, которая дала ему записку и сказала: «Сам не читай - дай другим почитать!» Жена из-за прочтенного выгнала из дома, лучший друг тоэже выставил за порог, милиционер отдал под суд, судья приговорил к расстрелу, апостол Петр выгнал из рая, а чёрт из ада. Старец заинтересовался и попросил дать ему записку. Прочитав слова в ней, старец воскликнул: «Да за такие слова тебе и в моей лодке не место!» …и вышвырнул мужика за борт.\nПлывет мужик. Долго плывет. И думает: «Дай-ка я прочту, что же там написано!». Достает он эту записку, разворачивает, а буквы водой смыло."
  },
  {
    "author_id": 4,
    "category": "Цитаты",
    "image": "/img/olya.jpg",
    "title": "Великие цитаты великих людей",
    "text": "Никогда ничего не бойтесь, живите здесь и сейчас. Кайфуйте!\nЖизнь одна! ААААААААААААААА!"
  },
  {
	"author_id": 2,
    "category": "Веб-уязвимости",
    "image": "/img/xss.jpg",
    "title": "Уязвимость XSS",
	"text": "Межсайтовый скриптинг\nВ этом разделе мы объясним, что такое межсайтовый скриптинг, опишем различные виды уязвимостей межсайтового скриптинга и расскажем, как обнаружить и предотвратить межсайтовый скриптинг.\n\nЧто такое межсайтовый скриптинг (XSS)?\nМежсайтовый скриптинг (также известный как XSS) — это уязвимость в системе веб-безопасности, которая позволяет злоумышленнику нарушить взаимодействие пользователей с уязвимым приложением. Она позволяет злоумышленнику обойти политику одного источника, которая предназначена для разделения разных веб-сайтов друг от друга. Уязвимости межсайтового скриптинга обычно позволяют злоумышленнику выдавать себя за пользователя-жертву, выполнять любые действия, которые может выполнять пользователь, и получать доступ к любым данным пользователя. Если у пользователя-жертвы есть привилегированный доступ в приложении, злоумышленник может получить полный контроль над всеми функциями приложения и его данными.\n\nКак работает XSS?\nМежсайтовый скриптинг работает путем манипулирования уязвимым веб-сайтом таким образом, что он возвращает пользователям вредоносный JavaScript. Когда вредоносный код выполняется в браузере жертвы, злоумышленник может полностью скомпрометировать их взаимодействие с приложением.\n\nКаковы типы XSS-атак?\n\nСуществует три основных типа XSS-атак. Это:\nОтраженный XSS, когда вредоносный скрипт поступает из текущего HTTP-запроса.\nХранимый XSS, при котором вредоносный скрипт поступает из базы данных веб-сайта.\nXSS на основе DOM, при котором уязвимость существует в клиентском коде, а не в серверном.\n\nПодробнее прочитать про XSS можно <a href=\"https://portswigger.net/web-security/cross-site-scripting\">здесь</a>."
  },
  {
	"author_id": 2,
    "category": "Веб-уязвимости",
    "image": "/img/sqli.jpg",
    "title": "Уязвимость SQLi",
	"text": "SQL-инъекция\nВ этом разделе мы объясняем:\nЧто такое SQL-инъекция (SQLi).\nКак находить и использовать различные типы уязвимостей SQLi.\nКак предотвратить SQLi.\n\nЧто такое SQL-инъекция (SQLi)?\n\nSQL-инъекция (SQLi) - это уязвимость в системе веб-безопасности, которая позволяет злоумышленнику вмешиваться в запросы, которые приложение выполняет к своей базе данных. Это может позволить злоумышленнику просматривать данные, которые они обычно не могут получить. Это могут быть данные, принадлежащие другим пользователям, или любые другие данные, к которым приложение может получить доступ. Во многих случаях злоумышленник может изменять или удалять эти данные, вызывая постоянные изменения содержимого или поведения приложения.\n\nВ некоторых ситуациях злоумышленник может усилить атаку с использованием SQL-инъекций, чтобы скомпрометировать базовый сервер или другую внутреннюю инфраструктуру. Это также позволяет ему проводить атаки типа «отказ в обслуживании».\n\nКаковы последствия успешной атаки с использованием SQL-инъекции?\n\nУспешная атака с использованием SQL-инъекций может привести к несанкционированному доступу к конфиденциальным данным, таким как:\nПароли.\nДанные кредитной карты.\nЛичная информация пользователя.\nНа протяжении многих лет атаки с использованием SQL-инъекций применялись во многих громких случаях утечки данных. Они наносили репутационный ущерб и приводили к штрафам со стороны регулирующих органов. В некоторых случаях злоумышленник может получить постоянный доступ к системам организации, что приводит к долгосрочному компрометации, которая может оставаться незамеченной в течение длительного времени.\n\nКак обнаружить уязвимости SQL-инъекции\n\nВы можете обнаружить SQL-инъекцию вручную, используя систематический набор тестов для каждой точки входа в приложение. Для этого вы обычно отправляете:\n\nЗаключите символ в одинарные кавычки ' и ищите ошибки или другие аномалии.\nСинтаксис, специфичный для SQL, который вычисляет базовое (исходное) значение точки входа и другое значение, а также ищет систематические различия в ответах приложения.\nЛогические условия, такие как OR 1=1 и OR 1=2, и поиск различий в ответах приложения.\nРабочие нагрузки, предназначенные для задержки времени при выполнении в рамках SQL-запроса, и поиск различий во времени отклика.\nOAST — полезная нагрузка, предназначенная для запуска внеполосного сетевого взаимодействия при выполнении SQL-запроса и отслеживания любых возникающих в результате взаимодействий.\nКроме того, вы можете быстро и надёжно найти большинство уязвимостей, связанных с внедрением SQL, с помощью Burp Scanner.\n\nПродолжение данной статьи про SQLi можно прочитать <a href=\"https://portswigger.net/web-security/sql-injection\">здесь</a>."
  },
  {
	"author_id": 4,
    "category": "Сети",
    "image": "/img/http.jpg",
    "title": "Протокол HTTP",
	"text": "Вашему вниманию предлагается описание основных аспектов протокола HTTP — сетевого протокола, с начала 90-х и по сей день позволяющего вашему браузеру загружать веб-страницы. Данная статья написана для тех, кто только начинает работать с компьютерными сетями и заниматься разработкой сетевых приложений, и кому пока что сложно самостоятельно читать официальные спецификации.\n\n\nHTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие организовать переход к другим документам).\nАббревиатура HTTP расшифровывается как HyperText Transfer Protocol, «протокол передачи гипертекста». В соответствии со спецификацией OSI, HTTP является протоколом прикладного (верхнего, 7-го) уровня. Актуальная на данный момент версия протокола, HTTP 1.1, описана в спецификации RFC 2616.\nПротокол HTTP предполагает использование клиент-серверной структуры передачи данных. Клиентское приложение формирует запрос и отправляет его на сервер, после чего серверное программное обеспечение обрабатывает данный запрос, формирует ответ и передаёт его обратно клиенту. После этого клиентское приложение может продолжить отправлять другие запросы, которые будут обработаны аналогичным образом.\nЗадача, которая традиционно решается с помощью протокола HTTP — обмен данными между пользовательским приложением, осуществляющим доступ к веб-ресурсам (обычно это веб-браузер) и веб-сервером. На данный момент именно благодаря протоколу HTTP обеспечивается работа Всемирной паутины.\nТакже HTTP часто используется как протокол передачи информации для других протоколов прикладного уровня, таких как SOAP, XML-RPC и WebDAV. В таком случае говорят, что протокол HTTP используется как «транспорт».\nAPI многих программных продуктов также подразумевает использование HTTP для передачи данных — сами данные при этом могут иметь любой формат, например, XML или JSON.\nКак правило, передача данных по протоколу HTTP осуществляется через TCP/IP-соединения. Серверное программное обеспечение при этом обычно использует TCP-порт 80 (и, если порт не указан явно, то обычно клиентское программное обеспечение по умолчанию использует именно 80-й порт для открываемых HTTP-соединений), хотя может использовать и любой другой.\n\nПродолжение данной статьи про HTTP можно прочитать <a href=\"https://habr.com/ru/articles/215117\">здесь</a>."
  },
  {
	"author_id": 4,
    "category": null,
    "image": "/img/pasta.jpg",
    "title": "Рецепт пасты карбонара",
	"text": "ИНСТРУКЦИЯ ПРИГОТОВЛЕНИЯ\n\n1. Спагетти варить 7-10 минут в кипящей подсоленной воде и откинуть на дуршлаг.\n2. В сковороде разогрейте оливковое масло, положите чеснок и слегка подрумяньте.\n3. Ветчину/бекон мелко нарежьте, добавьте к чесноку и обжаривайте 5 минут.\n4. Сыр пармезан натрите на мелкой терке. Желтки взбить со сливками, немного подсолить.\n5. Спагетти переложить в сотейник с чесноком и ветчиной/беконом.\n6. Добавить взбитые желтки и тёртый сыр, перемешать. Держать на огне 3 минуты.\n7. Посыпать молотым перцем, украсить зеленью и подавать на стол."
  }
]
